snippet !arv
  ActiveRecord::Base.logger = Logger.new \$stdout; ActiveRecord.verbose_query_logs = true

snippet !bench
  def bench(no_gc: true, &block)
    require 'benchmark'
    GC.start
    GC.disable if no_gc

    memory_before = \`ps -o rss= -p #{Process.pid}\`.to_f
    gc_stat_before = GC.stat
    time = Benchmark.realtime(&block)
    puts('BEFORE')
    puts(ObjectSpace.count_objects)
    GC.start(full_mark: true, immediate_sweep: true, immediate_mark: false) unless no_gc
    puts("\n")

    gc_stat_after = GC.stat
    memory_after = \`ps -o rss= -p #{Process.pid}\`.to_f
    h = {
      ruby_version: RUBY_VERSION,
      time: time.round(2),
      gc_count: gc_stat_after[:count] - gc_stat_before[:count],
      memory: "#{(memory_after - memory_before) / 1024} MB"
    }
    puts('AFTER')
    puts(ObjectSpace.count_objects)
    puts(h)
    puts("\n")

    GC.enable
    h
  end

snippet !consclass
	class Person
		# extend/include/prepend go first
		extend SomeModule
		include AnotherModule
		prepend YetAnotherModule

		# inner classes
		class CustomError < StandardError
		end

		# constants are next
		SOME_CONSTANT = 20

		# afterwards we have attribute macros
		attr_reader :name

		# followed by other macros (if any)
		validates :name

		# public class methods are next in line
		def self.some_method
		end

		# initialization goes between class methods and other instance methods
		def initialize
		end

		# followed by other public instance methods
		def some_method
		end

		# protected and private methods are grouped near the end
		protected

		def some_protected_method
		end

		private

		def some_private_method
		end
	end
