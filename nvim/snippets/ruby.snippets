##########################
#     Special            #
##########################
snippet !arv
	ActiveRecord::Base.logger = Logger.new \$stdout; ActiveRecord.verbose_query_logs = true
snippet !bench
  def bench(no_gc: true, &block)
    require 'benchmark'
    GC.start
    GC.disable if no_gc

    memory_before = \`ps -o rss= -p #{Process.pid}\`.to_f
    gc_stat_before = GC.stat
    time = Benchmark.realtime(&block)
    puts('BEFORE')
    puts(ObjectSpace.count_objects)
    GC.start(full_mark: true, immediate_sweep: true, immediate_mark: false) unless no_gc
    puts("\n")

    gc_stat_after = GC.stat
    memory_after = \`ps -o rss= -p #{Process.pid}\`.to_f
    h = {
      ruby_version: RUBY_VERSION,
      time: time.round(2),
      gc_count: gc_stat_after[:count] - gc_stat_before[:count],
      memory: "#{(memory_after - memory_before) / 1024} MB"
    }
    puts('AFTER')
    puts(ObjectSpace.count_objects)
    puts(h)
    puts("\n")

    GC.enable
    h
  end
snippet !bmbm
	require 'benchmark/ips'

	Benchmark.ips do |x|
		x.report("foo") { "foo" }
		x.report("bar") { 'bar' }
		x.compare!
	end
snippet !consclass
	class Person
		# extend/include/prepend go first
		extend SomeModule
		include AnotherModule
		prepend YetAnotherModule

		# inner classes
		class CustomError < StandardError
		end

		# constants are next
		SOME_CONSTANT = 20

		# afterwards we have attribute macros
		attr_reader :name

		# followed by other macros (if any)
		validates :name

		# public class methods are next in line
		def self.some_method
		end

		# initialization goes between class methods and other instance methods
		def initialize
		end

		# followed by other public instance methods
		def some_method
		end

		# protected and private methods are grouped near the end
		protected

		def some_protected_method
		end

		private

		def some_private_method
		end
	end
snippet !factory
	require "factory_bot"; include FactoryBot::Syntax::Methods; FactoryBot.find_definitions
snippet !request
	request = Rack::MockRequest.env_for('http://localhost:3000')
	Rails.application.call(request)
snippet cla
	class `substitute(substitute(substitute(substitute(expand('%:.:r'), '.\{-}/.\{-}/', '', 'g'), '\<\(\w\)\(\w*\)', '\u\1\l\2', 'g'), '_\(\w\)', '\u\1', 'g'), '/', '::', 'g')`
		${0}
	end
##########################
#     Misc               #
##########################
snippet #!
	#!/usr/bin/env ruby
snippet frozen
	# frozen_string_literal: true
##########################
#     YARD               #
##########################
snippet yp
	# @param ${0:name} [${2:Class}] ${1:description}
snippet yph
	# @param ${0:name} [Hash{String=>Integer}] ${1:description}
snippet ypd
	# @param ${0:name} [#read] ${1:description}
snippet ypi
	# @param ${0:name} [Integer] ${1:description}
snippet yps
	# @param ${0:name} [String] ${1:description}
snippet yr
	# @return [${0:Class}] ${1:description}
snippet yar
	# @!attribute [r] ${0:name}
	#   @return [${1:Class}] ${2:description}
snippet yarw
	# @!attribute [rw] count
	#   @return [Fixnum] the size of the list
##########################
#     Debugging          #
##########################
snippet debug
	require 'debug'; binding.b
snippet pry
	require 'pry-byebug'; binding.pry
##########################
#     Rspec              #
##########################
snippet descc
	described_class
snippet desc
	describe ${1:message} do
		${0}
	end
snippet rdesc
	RSpec.describe ${1:message} do
		${0}
	end
snippet descm
	describe "${1:#method}" do
		${0:pending 'Not implemented'}
	end
snippet cont
	context "${1:message}" do
		${0}
	end
snippet inc
  include_context "${1:message}"
	  ${0}
snippet bef
	before do
		${0}
	end
snippet aft
	after do
		${0}
	end
snippet let
	let(:${1:object}) { ${0} }
snippet let!
	let!(:${1:object}) { ${0} }
snippet subj
	subject(:${1:object}) { ${0} }
snippet s.
	subject.${0:method}
snippet spec
	specify { subject.${0} }
snippet exp
	expect(${1:object}).to ${0}
snippet expn
	expect(${1:object}).not_to ${0}
snippet expb
	expect { ${1:object} }.to ${0}
snippet experr
	expect { ${1:object} }.to raise_error ${2:StandardError}, /${0:message_regex}/
snippet allow
	allow(${1:object}).to ${0}
snippet shared
	shared_examples ${0:'shared examples name'}
snippet sharedcont
	RSpec.shared_context ${1:'shared context name'} do
	  ${0}
	end
snippet ibl
	it_behaves_like ${0:'shared examples name'}
snippet it
	it '${1:spec_name}' do
		${0}
	end
snippet its
	its(:${1:method}) { should ${0} }
snippet iexp
	it { expect(${1:object}).${2} ${0} }
snippet iexpb
	it { expect { ${1:object} }.${2} ${0} }
snippet iiexp
	it { is_expected.to ${0} }
snippet iiexpn
	it { is_expected.not_to ${0} }
